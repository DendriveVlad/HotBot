import string
from asyncio.exceptions import TimeoutError
from asyncio import sleep
from random import choice, sample, randint, shuffle

from discord_components import Button, ButtonStyle
from discord.errors import NotFound
from discord import Embed

from config import BOT_ID


async def is_player_in_game(member, db):
    data = db.select("games", "", "players")
    if data:
        if isinstance(data, dict):
            games = [data]
        else:
            games = data
        for game in games:
            if str(member) in game["players"].split():
                return True


async def potato_game(room, owner, bot, db, game_hub):
    game = Game(bot, room, db, game_hub, owner)

    try:
        member_gold_maximum = db.select("users", f"user_id == {owner}", "gold")["gold"]
        if member_gold_maximum > 100:
            member_gold_maximum = 100
        if member_gold_maximum:
            await room.send(f"<@{owner}>, –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –µ—ë –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.\n"
                            f"–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É (0 - {member_gold_maximum}):")
        else:
            await room.send(f"<@{owner}>, –∂–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤. (1/10)")

        while member_gold_maximum:
            try:
                cost = await bot.wait_for("message", timeout=30, check=lambda m: m.author.id == owner and m.channel == room)
                game.cost = int(cost.content)
                if not (0 <= game.cost <= member_gold_maximum):
                    await room.purge()
                    await room.send(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0 - {member_gold_maximum}):")
                    continue
                db.update("games", f"room_id == {room.id}", game_cost=game.cost)
                await room.purge()
                await room.send(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤. (1/10)")
                db.update("users", f"user_id == {owner}", gold=db.select("users", f"user_id == {owner}", "gold")["gold"] - game.cost)
                break
            except ValueError:
                await room.purge()
                await room.send(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0 - {member_gold_maximum}):")

    except TimeoutError:
        await room.purge()
        await room.send("–í—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—à–ª–æ, –∫–∞–Ω–∞–ª —É–¥–∞–ª—è–µ—Ç—Å—è.")
        await sleep(5)
        db.delete("games", f"room_id == {room.id}")
        await bot.send_log(f"[GameNotStarted] –ò–≥—Ä–∞ <@{owner}> –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å", color=0xA927C1)
        await room.delete()
        return

    game.invite_message = await game_hub.send(embed=Embed(title=f"–ò–≥—Ä–∞ \"–ì–æ—Ä—è—á–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞ üî•ü•î\"\n",
                                                          description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: **{game.cost}**\n"
                                                                      f"–ò–≥—Ä–æ–∫–∏ [{game.players}/10]: <@{owner}>",
                                                          color=0xEAEA04),
                                              components=[Button(style=ButtonStyle.green, label="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", emoji="‚ûï", custom_id=f"potato-{db.select('games', f'room_id == {room.id}', 'game_number')['game_number']}")])
    bot.loop.create_task(game.player_messages())

    try:
        await game.wait_players()

    except TimeoutError:
        if game.ready_to_start != 2:
            if len(db.select("games", f"room_id == {room.id}", "players")["players"].split()) >= 3:
                await room.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –∑–¥–µ—Å—å –µ—Å—Ç—å")
                db.update("games", f"room_id == {room.id}", started=1)
                game.ready_to_start = 1
                await game.starting_game()
            else:
                await game.invite_message.delete()
                await room.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ. –ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏—Å—å, –∫–∞–Ω–∞–ª —É–¥–∞–ª—è–µ—Ç—Å—è")
                await sleep(5)
                db.delete("games", f"room_id == {room.id}")
                await room.delete()
                if game.cost:
                    for player in game.players_list:
                        db.update("users", f"user_id == {player}", gold=db.select("users", f"user_id == {player}", "gold")["gold"] + game.cost)
                await bot.send_log(f"[GameNotStarted] –ò–≥—Ä–∞ <@{owner}> –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å", color=0xA927C1)
                return


class Game:
    def __init__(self, bot, room, db, game_hub, owner):
        self.bot = bot
        self.room = room
        self.db = db
        self.hub = game_hub

        self.invite_message = None

        self.ready_to_start = 0  # 0 - –Ω–µ –≥–æ—Ç–æ–≤—ã, 1 - –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, 2 - –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å
        self.players_list = [owner]  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.total_players_list = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.total_players = 1  # –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ
        self.players = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.accept_players = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö –±—ã—Å—Ç—Ä—ã–π —Å—Ç—Ä–∞—Ç –∏–≥—Ä—ã
        self.accepts_list = []  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö –±—ã—Å—Ç—Ä—ã–π —Å—Ç—Ä–∞—Ç –∏–≥—Ä—ã
        self.active_player = 0  # –ò–≥—Ä–æ–∫, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—à–∫–∞
        self.cost = 0  # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
        self.total_money = 0  # –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –∏–≥—Ä—É
        self.difficulty = 0  # –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞

    async def wait_for_accept(self):
        while 1:
            try:
                accept_click = await self.bot.wait_for("button_click", timeout=60, check=lambda c: c.channel == self.room)
                await accept_click.respond(type=6)
                if accept_click.author.id in self.accepts_list:
                    continue
                self.accepts_list.append(accept_click.author.id)
                self.accept_players += 1
                await self.room.send(embed=Embed(description=f"{accept_click.author.mention} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã ({self.accept_players}/{self.players})"))
                if (100 / self.players) * self.accept_players >= 65:
                    self.ready_to_start = 1
                    await self.starting_game()
            except TimeoutError:
                if self.ready_to_start == 2:
                    return
            except NotFound:
                return
            except AttributeError:
                return

    async def starting_game(self):
        if self.ready_to_start == 2:
            return
        players = self.players
        m = await self.room.send("–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 5...")
        for i in range(4, 0, -1):
            await sleep(1)
            if players != self.players and self.ready_to_start == 0:
                await m.edit("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω—ë–Ω.")
                self.ready_to_start = 0
                return
            await m.edit(f"–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {i}...")
        await sleep(1)
        self.db.update("games", f"room_id == {self.room.id}", started=1)
        self.ready_to_start = 2
        await m.edit("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...")
        await sleep(2)
        await self.room.purge()
        self.total_money = self.players * self.cost
        self.total_players = self.players
        self.total_money *= 0.9
        await self.invite_message.delete()
        await self.game_process()

    async def game_process(self):
        self.total_players_list = self.players_list.copy()
        self.active_player, ignore_players = self.get_random_player([])
        passed_rounds = False  # —Å–ª—É–∂–∏—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (False - –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞—É–Ω–¥ –±—ã–ª –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ —Ä–∞—É–Ω–¥–∞ –¥–æ —ç—Ç–æ–≥–æ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–º, –∏–ª–∏ –∏–≥—Ä–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞—Å—å; True - –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –±—É–¥–µ—Ç –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ +1)
        first, second, third = 0, 0, 0,

        while 1:
            next_player, ignore_players = self.get_random_player(ignore_players)
            if self.difficulty <= 3:
                wait_time = 8
            elif self.difficulty <= 5:
                wait_time = 6
            elif self.difficulty <= 7:
                wait_time = 5
            else:
                wait_time = 3.5
            await self.room.send(f"<@{self.active_player}> –ø–æ–ª—É—á–∞–µ—Ç –≥–æ—Ä—è—á—É—é –∫–∞—Ä—Ç–æ—à–∫—É")
            await sleep(1.5)
            await self.room.send(f"<@{self.active_player}>, –í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≥–æ—Ä—è—á—É—é –∫–∞—Ä—Ç–æ—à–∫—É –∏–≥—Ä–æ–∫—É <@{next_player}>\n"
                                 f"–î–ª—è —ç—Ç–æ–≥–æ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ–¥ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ, –∫–æ—Ç–æ—Ä–∞—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.\n"
                                 f"–ù–∞ —ç—Ç–æ –≤–∞–º –≤—ã–¥–µ–ª–µ–Ω–æ **{wait_time} " + ("—Å–µ–∫—É–Ω–¥—ã" if isinstance(wait_time, float) else "—Å–µ–∫—É–Ω–¥") + "**")
            await sleep(4)
            players_tab = self.get_random_players_list(next_player)
            await self.room.send(embed=Embed(description="\n".join([f"**{code}**: <@{player if '*' not in player else player[1:]}>" for code, player in players_tab.items()]), color=0xEAEA04))
            await self.room.send("–í—Ä–µ–º—è –ø–æ—à–ª–æ")

            try:
                message = await self.bot.wait_for("message", timeout=wait_time, check=lambda m: m.author.id == self.active_player and m.channel == self.room)
                try:
                    if "*" in players_tab[message.content]:
                        await self.room.send(embed=Embed(description=f"<@{self.active_player}> –ø–µ—Ä–µ–¥–∞—ë—Ç –∫–∞—Ä—Ç–æ—à–∫—É", color=0x21F300))
                        self.active_player = next_player
                        if passed_rounds:
                            self.difficulty += 1
                        if self.players <= 4:  # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ 5, —Ç–æ –≤–∫–ª—é—á–∞–µ—Ç—Å—è —É—Å–∫–æ—Ä–µ–Ω–∏–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è
                            self.difficulty += randint(0, 1)
                        passed_rounds = not passed_rounds
                        continue
                    else:
                        await self.room.send(embed=Embed(description=f"<@{self.active_player}> –ø–µ—Ä–µ–¥–∞—ë—Ç –∫–∞—Ä—Ç–æ—à–∫—É –Ω–µ —Ç–æ–º—É –∏–≥—Ä–æ–∫—É –∏ –æ–±–∂–∏–≥–∞–µ—Ç –µ–≥–æ, –≤ –æ—Ç–≤–µ—Ç —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –∏–∑–±–∏–ª –±—Ä–æ—Å–∞—é—â–µ–≥–æ—Å—è –¥–æ —Å–º–µ—Ä—Ç–∏", color=0xF9871C))
                except KeyError:
                    await self.room.send(embed=Embed(description=f"<@{self.active_player}> –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—à–∫—É –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∫—É–¥–∞, –∏–∑-–∑–∞ —á–µ–≥–æ –æ–Ω–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –æ–∫–Ω–æ, –∞ –≤–ª–∞–¥–µ–ª–∏—Ü –æ–∫–Ω–∞ —Ä–µ—à–∞–µ—Ç –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—ë —Ä—É–∂—å—ë –Ω–∞ –∏–≥—Ä–æ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç–æ—à–∫—É", color=0xF9871C))
            except TimeoutError:
                await self.room.send(embed=Embed(description=f"<@{self.active_player}> –≤–ª—é–±–ª—è–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—à–∫—É, –Ω–æ –∫–∞—Ä—Ç–æ—à–∫–∞ –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —ç—Ç—É –ª—é–±–æ–≤ –∏ —Å–∂–∏–≥–∞–µ—Ç —Å–≤–æ–µ–≥–æ —Ñ–∞–Ω–∞—Ç–∞", color=0xF9871C))

            self.players_list.remove(self.active_player)
            ignore_players = [next_player]
            self.players -= 1

            if self.players == 2 and self.total_players > 5:
                third = self.active_player
            elif self.players == 1:
                if self.total_players > 3:
                    second = self.active_player
                first = next_player
                break

            self.active_player = next_player
            passed_rounds = False
            self.difficulty //= 2

        if third:
            first_place, second_place, third_place = (80, self.total_money * 0.5), (50, self.total_money * 0.3), (30, self.total_money * 0.2)
        elif second:
            first_place, second_place, third_place = (80, self.total_money * 0.6), (50, self.total_money * 0.4), 0
        else:
            first_place, second_place, third_place = (80, self.total_money), 0, 0

        if third:
            date = self.db.select("users", f"user_id == {third}", "gold", "points")
            self.db.update("users", f"user_id == {third}", points=date["points"] + third_place[0], gold=date["gold"] + third_place[-1])
        if second:
            date = self.db.select("users", f"user_id == {second}", "gold", "points")
            self.db.update("users", f"user_id == {second}", points=date["points"] + second_place[0], gold=date["gold"] + second_place[-1])
        date = self.db.select("users", f"user_id == {first}", "gold", "points")
        self.db.update("users", f"user_id == {first}", points=date["points"] + first_place[0], gold=date["gold"] + first_place[-1])
        for p in self.total_players_list:
            if p in (third, second, first):
                continue
            self.db.update("users", f"user_id == {first}", points=self.db.select("users", f"user_id == {first}", "points")["points"] + 25)
        await self.room.send("", embed=Embed(title="–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞", description=f"1 –º–µ—Å—Ç–æ: <@{first}>\n"
                                                                                f"+{first_place[0]} –æ–ø—ã—Ç–∞, +{int(first_place[-1])} {'–∑–æ–ª–æ—Ç–æ' if str(first_place[-1])[-1] == '1' else '–∑–æ–ª–æ—Ç–∞'}\n\n" +
                                                                                (f"2 –º–µ—Å—Ç–æ: <@{second}>\n"
                                                                                 f"+{second_place[0]} –æ–ø—ã—Ç–∞, +{int(second_place[-1])} {'–∑–æ–ª–æ—Ç–æ' if str(second_place[-1])[-1] == '1' else '–∑–æ–ª–æ—Ç–∞'}\n\n" +
                                                                                 (f"3 –º–µ—Å—Ç–æ: <@{third}>\n"
                                                                                  f"+{third_place[0]} –æ–ø—ã—Ç–∞, +{int(third_place[-1])} {'–∑–æ–ª–æ—Ç–æ' if str(third_place[-1])[-1] == '1' else '–∑–æ–ª–æ—Ç–∞'}\n\n" if third else "") if second else "") +
                                                                                "\n–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∏–ª–∏ —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑ –≤ —Ä–∞–∑–º–µ—Ä–µ 25 –æ–ø—ã—Ç–∞", color=0xEDD50B))
        await self.room.send("–ö–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
        self.active_player = 0
        await sleep(30)
        self.db.delete("games", f"room_id == {self.room.id}")
        await self.room.delete()
        await self.bot.send_log(f"[GameEnd] –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: <@{first}>", color=0xE160F9)

    def get_random_player(self, ignore_players: list[int]) -> tuple[int, list[int]]:
        players = self.players_list.copy()
        if len(players) <= len(ignore_players):
            ignore_players = [ignore_players[-1]]
        for i in ignore_players:
            if i not in players:
                ignore_players.remove(i)
                continue
            players.remove(i)
        chosen_player = choice(players)
        ignore_players.append(chosen_player)
        return chosen_player, ignore_players

    def get_random_letter(self) -> str:
        if self.difficulty < 3:
            letters = choice((string.digits, string.ascii_lowercase))
            length = self.difficulty // 2 if self.difficulty > 1 else 1
        elif self.difficulty < 5:
            letters = choice((string.digits, string.ascii_lowercase, string.ascii_uppercase))
            length = self.difficulty // 2
        else:
            letters = string.digits + string.ascii_letters
            if self.difficulty > 15:
                length = randint(4, 6)
            elif self.difficulty > 9:
                length = randint(3, 5)
            else:
                length = self.difficulty // 2
        return ''.join(sample(letters, length))

    def get_random_players_list(self, need_player: int) -> dict[str: int]:
        players = self.total_players_list.copy()
        players.remove(self.active_player)
        shuffle(players)
        players_tab = {}
        for p in players:
            players_tab[self.get_random_letter()] = "*" + str(p) if p == need_player else str(p)

        while len(players_tab) != len(players):
            if "*" + str(need_player) not in players_tab.values():
                players_tab[self.get_random_letter()] = "*" + str(need_player)
            else:
                players_tab[self.get_random_letter()] = str(879324092732420107)
        return players_tab

    async def player_messages(self):
        while 1:
            try:
                message = await self.bot.wait_for("message", timeout=60, check=lambda m: m.channel == self.room)
                if message.author.id in (self.active_player, BOT_ID):
                    continue
                await message.delete()
            except TimeoutError:
                continue
            except NotFound:
                return
            except AttributeError:
                return

    async def wait_players(self):
        players_count = len(self.db.select("games", f"room_id == {self.room.id}", "players")["players"].split())
        while players_count < 10:
            join_button_click = await self.bot.wait_for("button_click", timeout=120,
                                                        check=lambda c: c.channel == self.hub and c.custom_id == f"potato-{self.db.select('games', f'room_id == {self.room.id}', 'game_number')['game_number']}")
            if await is_player_in_game(join_button_click.author.id, self.db):
                continue
            if self.db.select("users", f"user_id == {join_button_click.author.id}", "gold")["gold"] < self.cost:
                await join_button_click.respond(embed=Embed(description="–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞", color=0xBF1818))
                continue
            if join_button_click.author.id in self.players_list:
                continue
            try:
                await join_button_click.respond(content=f"–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª —Å –∏–≥—Ä–æ–π <#{self.room.id}>.")
            except NotFound:
                continue
            self.db.update("games", f"room_id == {self.room.id}", players=self.db.select("games", f"room_id == {self.room.id}", "players")["players"] + f" {join_button_click.author.id}")
            self.db.update("users", f"user_id == {join_button_click.author.id}", gold=self.db.select("users", f"user_id == {join_button_click.author.id}", "gold")["gold"] - self.cost)
            await self.room.set_permissions(join_button_click.author, read_messages=True, send_messages=True)
            if players_count == 2:
                await self.room.send("–ö –∏–≥—Ä–µ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ",
                                     components=[Button(style=ButtonStyle.green, label="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", emoji="‚ñ∂", custom_id="start")]
                                     )
                self.bot.loop.create_task(self.wait_for_accept())
            players_count = len(self.db.select("games", f"room_id == {self.room.id}", "players")["players"].split())
            self.players = players_count
            self.players_list.append(join_button_click.author.id)
            if (100 / self.players) * self.accept_players < 65:
                self.ready_to_start = 0
            await self.room.send(f"<@{join_button_click.author.id}> –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∏–≥—Ä–µ ({self.players}/10)")
            await self.invite_message.edit(embed=Embed(title=f"–ò–≥—Ä–∞ \"–ì–æ—Ä—è—á–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞ üî•ü•î\"\n",
                                                       description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: **{self.cost}**\n"
                                                                   f"–ò–≥—Ä–æ–∫–∏ [{self.players}/10]: {', '.join([f'<@{i}>' for i in self.players_list])}",
                                                       color=0xEAEA04))
        self.db.update("games", f"room_id == {self.room.id}", started=1)
        self.ready_to_start = 2
        await self.starting_game()
