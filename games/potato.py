import string
from asyncio.exceptions import TimeoutError
from asyncio import sleep
from random import choice, sample, randint, shuffle

from nextcord.errors import NotFound
from nextcord import Embed, ButtonStyle, Interaction
from nextcord.ui import View, Button

from config import BOT_ID
from info import send_log
from image_processing.UsersInfo import challengePassed


async def is_player_in_game(member, db):
    data = db.select("games", "", "players")
    if data:
        if isinstance(data, dict):
            games = [data]
        else:
            games = data
        for game in games:
            if str(member) in game["players"].split():
                return True


async def potato_game(room, owner, bot, db, game_hub, gamemode):
    game = Game(bot, room, db, game_hub, owner, gamemode)

    try:
        member_gold_maximum = db.select("users", f"user_id == {owner}", "gold")["gold"]
        if member_gold_maximum > 100:
            member_gold_maximum = 100
        if member_gold_maximum:
            await room.send(f"<@{owner}>, –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –µ—ë –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.\n"
                            f"–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É (0 - {member_gold_maximum}):")
        else:
            await room.send(f"<@{owner}>, –∂–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤. (1/10)")

        while member_gold_maximum:
            try:
                cost = await bot.wait_for("message", timeout=30, check=lambda m: m.author.id == owner and m.channel == room)
                game.cost = int(cost.content)
                if not (0 <= game.cost <= member_gold_maximum):
                    await room.purge()
                    await room.send(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0 - {member_gold_maximum}):")
                    continue
                db.update("games", f"room_id == {room.id}", game_cost=game.cost)
                await room.purge()
                await room.send(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤. (1/10)")
                db.update("users", f"user_id == {owner}", gold=db.select("users", f"user_id == {owner}", "gold")["gold"] - game.cost)
                break
            except ValueError:
                await room.purge()
                await room.send(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0 - {member_gold_maximum}):")

    except TimeoutError:
        await room.purge()
        await room.send("–í—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—à–ª–æ, –∫–∞–Ω–∞–ª —É–¥–∞–ª—è–µ—Ç—Å—è.")
        await sleep(5)
        db.delete("games", f"room_id == {room.id}")
        await send_log(guild=room.guild, log_type="GameNotStarted", info=f"–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å", member=bot.get_user(owner), color=0xA927C1)
        await room.delete()
        return
    view = Connection(game)
    game.invite_message = await game_hub.send(embed=Embed(title=f"–ò–≥—Ä–∞ \"–ì–æ—Ä—è—á–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞ ({'–ë—ã—Å—Ç—Ä–∞—è' if game.mode == 's' else '–î–ª–∏–Ω–Ω–∞—è'})üî•ü•î\"\n",
                                                          description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: **{game.cost}**\n"
                                                                      f"–ò–≥—Ä–æ–∫–∏ [{game.players}/10]: <@{owner}>",
                                                          color=0xEAEA04), view=view)
    bot.loop.create_task(game.player_messages())


class StartGame(Button):
    def __init__(self, game_class):
        super().__init__(style=ButtonStyle.success, label="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", emoji="‚ñ∂", custom_id="start")
        self.game = game_class

    async def callback(self, interaction: Interaction):
        await interaction.response.pong()
        if interaction.user.id in self.game.accepts_list:
            return
        self.game.accepts_list.append(interaction.user.id)
        self.game.accept_players += 1
        await self.game.room.send(embed=Embed(description=f"{interaction.user.mention} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã ({self.game.accept_players}/{self.game.players})"))
        if self.game.ready_to_start:
            return
        if (100 / self.game.players) * self.game.accept_players >= 65:
            self.game.ready_to_start = 1
            await self.game.starting_game()


class ConnectionButton(Button):
    def __init__(self, game_class):
        self.game = game_class
        super().__init__(style=ButtonStyle.success, label="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", emoji="‚ûï", custom_id=f"potato-{self.game.db.select('games', f'room_id == {self.game.room.id}', 'game_number')['game_number']}")

    async def callback(self, interaction):
        players_count = len(self.game.db.select("games", f"room_id == {self.game.room.id}", "players")["players"].split())
        if players_count < 10:
            if await is_player_in_game(interaction.user.id, self.game.db):
                return
            if self.game.db.select("users", f"user_id == {interaction.user.id}", "gold")["gold"] < self.game.cost:
                await interaction.response.send_message(embed=Embed(description="–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞", color=0xBF1818), ephemeral=True)
                return
            if interaction.user.id in self.game.players_list.keys():
                return
            try:
                await interaction.response.send_message(content=f"–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª —Å –∏–≥—Ä–æ–π <#{self.game.room.id}>.", ephemeral=True)
            except NotFound:
                return
            self.game.db.update("games", f"room_id == {self.game.room.id}", players=self.game.db.select("games", f"room_id == {self.game.room.id}", "players")["players"] + f" {interaction.user.id}")
            self.game.db.update("users", f"user_id == {interaction.user.id}", gold=self.game.db.select("users", f"user_id == {interaction.user.id}", "gold")["gold"] - self.game.cost)
            await self.game.room.set_permissions(interaction.user, read_messages=True)
            if players_count == 2:
                view = View(timeout=600)
                view.add_item(StartGame(self.game))
                await self.game.room.send("–ö –∏–≥—Ä–µ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ", view=view)
            players_count = len(self.game.db.select("games", f"room_id == {self.game.room.id}", "players")["players"].split())
            self.game.players = players_count
            self.game.players_list[interaction.user.id] = 1 if self.game.mode == "s" else 3
            if (100 / self.game.players) * self.game.accept_players < 65:
                self.game.ready_to_start = 0
            await self.game.room.send(f"<@{interaction.user.id}> –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∏–≥—Ä–µ ({self.game.players}/10)")
            await self.game.invite_message.edit(embed=Embed(title=f"–ò–≥—Ä–∞ \"–ì–æ—Ä—è—á–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞ ({'–ë—ã—Å—Ç—Ä–∞—è' if self.game.mode == 's' else '–î–ª–∏–Ω–Ω–∞—è'})üî•ü•î\"\n",
                                                            description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: **{self.game.cost}**\n"
                                                                        f"–ò–≥—Ä–æ–∫–∏ [{self.game.players}/10]: {', '.join([f'<@{i}>' for i in self.game.players_list.keys()])}",
                                                            color=0xEAEA04))
        else:
            self.game.db.update("games", f"room_id == {self.game.room.id}", started=1)
            self.game.ready_to_start = 2
            await self.game.starting_game()


class Connection(View):
    def __init__(self, game_class):
        super().__init__(timeout=60)
        self.game = game_class
        self.add_item(ConnectionButton(game_class))

    async def on_timeout(self):
        if self.game.ready_to_start != 2:
            if len(self.game.db.select("games", f"room_id == {self.game.room.id}", "players")["players"].split()) >= 3:
                await self.game.room.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –∑–¥–µ—Å—å –µ—Å—Ç—å")
                self.game.db.update("games", f"room_id == {self.game.room.id}", started=1)
                self.game.ready_to_start = 1
                await self.game.starting_game()
            else:
                await self.game.invite_message.delete()
                await self.game.room.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ. –ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏—Å—å, –∫–∞–Ω–∞–ª —É–¥–∞–ª—è–µ—Ç—Å—è")
                await sleep(5)
                self.game.db.delete("games", f"room_id == {self.game.room.id}")
                await self.game.room.delete()
                if self.game.cost:
                    for player in self.game.players_list.keys():
                        self.game.db.update("users", f"user_id == {player}", gold=self.game.db.select("users", f"user_id == {player}", "gold")["gold"] + self.game.cost)
                await send_log(guild=self.game.room.guild, log_type="GameNotStarted", info=f"–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å", member=self.game.bot.get_user(list(self.game.players_list.keys())[0]), color=0xA927C1)


class Game:
    def __init__(self, bot, room, db, game_hub, owner, mode):
        self.bot = bot
        self.room = room
        self.db = db
        self.hub = game_hub
        self.mode = mode

        self.invite_message = None

        self.ready_to_start = 0  # 0 - –Ω–µ –≥–æ—Ç–æ–≤—ã, 1 - –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, 2 - –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å
        self.players_list = {owner: 1 if mode == "s" else 3}  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.total_players_list = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.total_players = 1  # –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ
        self.players = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.accept_players = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö –±—ã—Å—Ç—Ä—ã–π —Å—Ç—Ä–∞—Ç –∏–≥—Ä—ã
        self.accepts_list = []  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö –±—ã—Å—Ç—Ä—ã–π —Å—Ç—Ä–∞—Ç –∏–≥—Ä—ã
        self.active_player = 0  # –ò–≥—Ä–æ–∫, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—à–∫–∞
        self.cost = 0  # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
        self.total_money = 0  # –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –∏–≥—Ä—É
        self.difficulty = 0  # –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞
        self.rounds_results = []  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (0 - –ø—Ä–æ–∏–≥—Ä—ã—à, 1 - –≤—ã–∏–≥—Ä—ã—à)

    async def starting_game(self):
        if self.ready_to_start == 2:
            return
        players = self.players
        m = await self.room.send("–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 5...")
        for i in range(4, 0, -1):
            await sleep(1)
            if players != self.players and self.ready_to_start == 0:
                await m.edit("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω—ë–Ω.")
                self.ready_to_start = 0
                return
            await m.edit(f"–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {i}...")
        await sleep(1)
        self.db.update("games", f"room_id == {self.room.id}", started=1)
        self.ready_to_start = 2
        await m.edit("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...")
        await sleep(2)
        await self.room.purge()
        self.total_money = self.players * self.cost
        self.total_players = self.players
        self.total_money *= 0.9
        await self.invite_message.delete()
        await self.game_process()

    async def game_process(self):
        self.total_players_list = list(self.players_list.keys()).copy()
        self.active_player, ignore_players = self.get_random_player([])
        first, second, third = 0, 0, 0,

        while 1:
            next_player, ignore_players = self.get_random_player(ignore_players)
            if self.difficulty <= 3:
                wait_time = 8
            elif self.difficulty <= 5:
                wait_time = 6
            elif self.difficulty <= 7:
                wait_time = 5
            else:
                wait_time = 3.5
            await self.room.send(f"<@{self.active_player}> –ø–æ–ª—É—á–∞–µ—Ç –≥–æ—Ä—è—á—É—é –∫–∞—Ä—Ç–æ—à–∫—É")
            await sleep(1.5)
            await self.room.send(f"<@{self.active_player}>, –í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≥–æ—Ä—è—á—É—é –∫–∞—Ä—Ç–æ—à–∫—É –∏–≥—Ä–æ–∫—É <@{next_player}>\n"
                                 f"–î–ª—è —ç—Ç–æ–≥–æ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ–¥ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ, –∫–æ—Ç–æ—Ä–∞—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.\n"
                                 f"–ù–∞ —ç—Ç–æ –≤–∞–º –≤—ã–¥–µ–ª–µ–Ω–æ **{wait_time} " + ("—Å–µ–∫—É–Ω–¥—ã" if isinstance(wait_time, float) else "—Å–µ–∫—É–Ω–¥") + "**")
            await sleep(4)
            players_tab = self.get_random_players_list(next_player)
            await self.room.send(embed=Embed(description="\n".join([f"**{code}**: <@{player if '*' not in player else player[1:]}>" for code, player in players_tab.items()]), color=0xEAEA04))
            await self.room.send("–í—Ä–µ–º—è –ø–æ—à–ª–æ")

            try:
                message = await self.bot.wait_for("message", timeout=wait_time, check=lambda m: m.author.id == self.active_player and m.channel == self.room)
                try:
                    if "*" in players_tab[message.content]:
                        self.rounds_results.append(1)
                        await self.room.send(embed=Embed(description=f"<@{self.active_player}> –ø–µ—Ä–µ–¥–∞—ë—Ç –∫–∞—Ä—Ç–æ—à–∫—É", color=0x21F300))
                        self.active_player = next_player
                        if (len(self.rounds_results) + 1) % 2:
                            self.difficulty += 1
                        chance_to_difficult_up = int(self.rounds_results.count(1) / len(self.rounds_results) * 100)
                        if len(self.rounds_results) > 6 and randint(0, 100) <= chance_to_difficult_up:
                            if len(self.rounds_results) > 15 and randint(0, 100) <= chance_to_difficult_up:
                                self.difficulty += 1
                            elif randint(0, 100) <= chance_to_difficult_up // 2:
                                self.difficulty += 1
                        if self.players <= 4:  # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ 5, —Ç–æ –≤–∫–ª—é—á–∞–µ—Ç—Å—è —É—Å–∫–æ—Ä–µ–Ω–∏–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è
                            self.difficulty += randint(0, 1)
                        continue
                    else:
                        await self.room.send(embed=Embed(description=f"<@{self.active_player}> –ø–µ—Ä–µ–¥–∞—ë—Ç –∫–∞—Ä—Ç–æ—à–∫—É –Ω–µ —Ç–æ–º—É –∏–≥—Ä–æ–∫—É –∏ –æ–±–∂–∏–≥–∞–µ—Ç –µ–≥–æ, –≤ –æ—Ç–≤–µ—Ç —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –∏–∑–±–∏–ª –±—Ä–æ—Å–∞—é—â–µ–≥–æ—Å—è –¥–æ —Å–º–µ—Ä—Ç–∏", color=0xF9871C))
                except KeyError:
                    await self.room.send(embed=Embed(description=f"<@{self.active_player}> –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—à–∫—É –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∫—É–¥–∞, –∏–∑-–∑–∞ —á–µ–≥–æ –æ–Ω–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –æ–∫–Ω–æ, –∞ –≤–ª–∞–¥–µ–ª–∏—Ü –æ–∫–Ω–∞ —Ä–µ—à–∞–µ—Ç –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—ë —Ä—É–∂—å—ë –Ω–∞ –∏–≥—Ä–æ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç–æ—à–∫—É", color=0xF9871C))
            except TimeoutError:
                await self.room.send(embed=Embed(description=f"<@{self.active_player}> –≤–ª—é–±–ª—è–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—à–∫—É, –Ω–æ –∫–∞—Ä—Ç–æ—à–∫–∞ –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —ç—Ç—É –ª—é–±–æ–≤ –∏ —Å–∂–∏–≥–∞–µ—Ç —Å–≤–æ–µ–≥–æ —Ñ–∞–Ω–∞—Ç–∞", color=0xF9871C))

            self.rounds_results.append(0)
            self.players_list[self.active_player] -= 1

            if self.players_list[self.active_player] <= 0:
                self.players_list.pop(self.active_player)
                self.players -= 1
                if self.mode == "l":
                    await self.room.send(embed=Embed(description=f"<@{self.active_player}> –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã", color=0xF9871C))
            else:
                await self.room.send(embed=Embed(description=f"—É <@{self.active_player}> –æ—Å—Ç–∞–ª–æ—Å—å {self.players_list[self.active_player] * '‚ô•'}", color=0xF9871C))

            ignore_players = [next_player]

            if self.players == 2 and self.total_players > 5:
                third = self.active_player
            elif self.players == 1:
                if self.total_players > 3:
                    second = self.active_player
                first = next_player
                break

            self.active_player = next_player
            if len(self.rounds_results) > 10:
                chance_upper_difficult = int(self.rounds_results.count(1) / len(self.rounds_results) * 100)
                up = randint(0, 100) < chance_upper_difficult
                if len(self.rounds_results) > 20:
                    if chance_upper_difficult > 80 and up:
                        self.difficulty //= 1.3
                        continue
                    elif chance_upper_difficult > 60 and up:
                        self.difficulty //= 1.5
                        continue
                elif chance_upper_difficult > 80 and up:
                    self.difficulty //= 1.5
                    continue
            self.difficulty //= 2

        if third:
            first_place, second_place, third_place = (80, self.total_money * 0.5), (50, self.total_money * 0.3), (30, self.total_money * 0.2)
        elif second:
            first_place, second_place, third_place = (80, self.total_money * 0.6), (50, self.total_money * 0.4), 0
        else:
            first_place, second_place, third_place = (80, self.total_money), 0, 0

        if third:
            date = self.db.select("users", f"user_id == {third}", "gold", "points")
            self.db.update("users", f"user_id == {third}", points=date["points"] + third_place[0], gold=date["gold"] + third_place[-1])
        if second:
            date = self.db.select("users", f"user_id == {second}", "gold", "points")
            self.db.update("users", f"user_id == {second}", points=date["points"] + second_place[0], gold=date["gold"] + second_place[-1])
        date = self.db.select("users", f"user_id == {first}", "gold", "points")
        self.db.update("users", f"user_id == {first}", points=date["points"] + first_place[0], gold=date["gold"] + first_place[-1])
        for p in self.total_players_list:
            self.db.update("users", f"user_id == {p}", points=self.db.select("users", f"user_id == {p}", "points")["points"] + 25)
            if self.db.select("users", f"user_id == {p}", "challenge")["challenge"] == 6:
                await challengePassed(self.bot, self.db, self.room.guild.get_member(p))
            if p in (third, second, first):
                continue
        await self.room.send("", embed=Embed(title="–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞", description=f"1 –º–µ—Å—Ç–æ: <@{first}>\n"
                                                                                f"+{first_place[0]} –æ–ø—ã—Ç–∞, +{int(first_place[-1])} {'–∑–æ–ª–æ—Ç–æ' if str(first_place[-1])[-1] == '1' else '–∑–æ–ª–æ—Ç–∞'}\n\n" +
                                                                                (f"2 –º–µ—Å—Ç–æ: <@{second}>\n"
                                                                                 f"+{second_place[0]} –æ–ø—ã—Ç–∞, +{int(second_place[-1])} {'–∑–æ–ª–æ—Ç–æ' if str(second_place[-1])[-1] == '1' else '–∑–æ–ª–æ—Ç–∞'}\n\n" +
                                                                                 (f"3 –º–µ—Å—Ç–æ: <@{third}>\n"
                                                                                  f"+{third_place[0]} –æ–ø—ã—Ç–∞, +{int(third_place[-1])} {'–∑–æ–ª–æ—Ç–æ' if str(third_place[-1])[-1] == '1' else '–∑–æ–ª–æ—Ç–∞'}\n\n" if third else "") if second else "") +
                                                                                "\n–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∏–ª–∏ —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑ –≤ —Ä–∞–∑–º–µ—Ä–µ 25 –æ–ø—ã—Ç–∞", color=0xEDD50B))
        await self.room.send("–ö–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
        self.active_player = 0
        await sleep(30)
        self.db.delete("games", f"room_id == {self.room.id}")
        await self.room.delete()
        await send_log(guild=self.room.guild, log_type="GameEnd", info=f"–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å", member=self.bot.get_user(list(self.players_list.keys())[0]), fields=("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:", f"<@{first}>"), color=0xE160F9)

    def get_random_player(self, ignore_players: list[int]) -> tuple[int, list[int]]:
        players = list(self.players_list.keys()).copy()
        if len(players) <= len(ignore_players):
            ignore_players = [ignore_players[-1]]
        for i in ignore_players:
            if i not in players:
                ignore_players.remove(i)
                continue
            players.remove(i)
        chosen_player = choice(players)
        ignore_players.append(chosen_player)
        return chosen_player, ignore_players

    def get_random_letter(self) -> str:
        if self.difficulty < 3:
            letters = choice((string.digits, string.ascii_lowercase))
            length = self.difficulty // 2 if self.difficulty > 1 else 1
        elif self.difficulty < 5:
            letters = choice((string.digits, string.ascii_lowercase, string.ascii_uppercase))
            length = self.difficulty // 2
        else:
            letters = string.digits + string.ascii_letters
            if self.difficulty > 15:
                length = randint(4, 6)
            elif self.difficulty > 9:
                length = randint(3, 5)
            else:
                length = self.difficulty // 2
        return ''.join(sample(letters, int(length)))

    def get_random_players_list(self, need_player: int) -> dict[str: int]:
        players = self.total_players_list.copy()
        players.remove(self.active_player)
        shuffle(players)
        players_tab = {}
        for p in players:
            players_tab[self.get_random_letter()] = "*" + str(p) if p == need_player else str(p)

        while len(players_tab) != len(players):
            if "*" + str(need_player) not in players_tab.values():
                players_tab[self.get_random_letter()] = "*" + str(need_player)
            else:
                players_tab[self.get_random_letter()] = str(879324092732420107)
        return players_tab

    async def player_messages(self):
        while 1:
            try:
                message = await self.bot.wait_for("message", timeout=60, check=lambda m: m.channel == self.room)
                if message.author.id in (self.active_player, BOT_ID):
                    continue
                await message.delete()
            except TimeoutError:
                continue
            except NotFound:
                return
            except AttributeError:
                return
