import string
from asyncio.exceptions import TimeoutError
from asyncio import sleep
from random import choice, sample, randint, shuffle

from nextcord.errors import NotFound
from nextcord import Embed, ButtonStyle, Interaction, Message, Member, TextChannel, PermissionOverwrite
from nextcord.ui import View, Button, button

import DataBase
from config import BOT_ID, SERVER_ID


async def is_player_in_game(member, db):
    data = db.select("games", "", "players")
    if data:
        if isinstance(data, dict):
            games = [data]
        else:
            games = data
        for game in games:
            if str(member) in game["players"].split():
                return True


async def mafia_game(room, owner, bot, db, game_hub):
    game = Game(bot, room, db, game_hub, owner)

    try:
        member_gold_maximum = db.select("users", f"user_id == {owner}", "gold")["gold"]
        if member_gold_maximum > 100:
            member_gold_maximum = 100
        if member_gold_maximum:
            await room.send(f"<@{owner}>, –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –µ—ë –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.\n"
                            f"–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É (0 - {member_gold_maximum}):")
        else:
            await room.send(f"<@{owner}>, –∂–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤. (1/10)")

        while member_gold_maximum:
            try:
                cost = await bot.wait_for("message", timeout=30, check=lambda m: m.author.id == owner and m.channel == room)
                game.cost = int(cost.content)
                if not (0 <= game.cost <= member_gold_maximum):
                    await room.purge()
                    await room.send(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0 - {member_gold_maximum}):")
                    continue
                db.update("games", f"room_id == {room.id}", game_cost=game.cost)
                await room.purge()
                await room.send(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤. (1/10)")
                db.update("users", f"user_id == {owner}", gold=db.select("users", f"user_id == {owner}", "gold")["gold"] - game.cost)
                break
            except ValueError:
                await room.purge()
                await room.send(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0 - {member_gold_maximum}):")

        await room.set_permissions(owner, send_message=None)

    except TimeoutError:
        await room.purge()
        await room.send("–í—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—à–ª–æ, –∫–∞–Ω–∞–ª —É–¥–∞–ª—è–µ—Ç—Å—è.")
        await sleep(5)
        db.delete("games", f"room_id == {room.id}")
        await bot.send_log(f"[GameNotStarted] –ò–≥—Ä–∞ <@{owner}> –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å", color=0xA927C1)
        await room.delete()
        return
    view = Connection(game)
    game.invite_message = await game_hub.send(embed=Embed(title=f"–ò–≥—Ä–∞ \"–ú–∞—Ñ–∏—è Liteü§µüïµÔ∏è‚Äç‚ôÇÔ∏è\"\n",
                                                          description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: **{game.cost}**\n"
                                                                      f"–ò–≥—Ä–æ–∫–∏ [{game.players}/10]: <@{owner}>",
                                                          color=0xEAEA04), view=view)


class ConnectionButton(Button):
    def __init__(self, game_class):
        self.game = game_class
        super().__init__(style=ButtonStyle.green, label="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", emoji="‚ûï", custom_id=f"mafia-{self.game.db.select('games', f'room_id == {self.game.room.id}', 'game_number')['game_number']}")

    async def callback(self, interaction):
        players_count = len(self.game.db.select("games", f"room_id == {self.game.room.id}", "players")["players"].split())
        if players_count < 15:
            if await is_player_in_game(interaction.user.id, self.game.db):
                return
            if self.game.db.select("users", f"user_id == {interaction.user.id}", "gold")["gold"] < self.game.cost:
                await interaction.response.send_message(embed=Embed(description="–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞", color=0xBF1818), ephemeral=True)
                return
            if interaction.user.id in self.game.players_list.keys():
                return
            try:
                await interaction.response.send_message(content=f"–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª —Å –∏–≥—Ä–æ–π <#{self.game.room.id}>.", ephemeral=True)
            except NotFound:
                return
            self.game.db.update("games", f"room_id == {self.game.room.id}", players=self.game.db.select("games", f"room_id == {self.game.room.id}", "players")["players"] + f" {interaction.user.id}")
            self.game.db.update("users", f"user_id == {interaction.user.id}", gold=self.game.db.select("users", f"user_id == {interaction.user.id}", "gold")["gold"] - self.game.cost)
            await self.game.room.set_permissions(interaction.user, read_messages=True)
            if players_count == 2:
                view = View()
                view.add_item(Button(style=ButtonStyle.green, label="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", emoji="‚ñ∂", custom_id="start"))
                await self.game.room.send("–ö –∏–≥—Ä–µ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ", view=view)
                self.game.bot.loop.create_task(self.game.wait_for_accept())
            players_count = len(self.game.db.select("games", f"room_id == {self.game.room.id}", "players")["players"].split())
            self.game.players = players_count
            self.game.players_list[interaction.user.id] = ""
            self.game.active_players_list.append(interaction.user.id)
            if (100 / self.game.players) * self.game.accept_players < 65:
                self.game.ready_to_start = 0
            await self.game.room.send(f"<@{interaction.user.id}> –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∏–≥—Ä–µ ({self.game.players}/10)")
            await self.game.invite_message.edit(embed=Embed(title=f"–ò–≥—Ä–∞ \"–ú–∞—Ñ–∏—è Liteü§µüïµÔ∏è‚Äç‚ôÇÔ∏è\"\n",
                                                            description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: **{self.game.cost}**\n"
                                                                        f"–ò–≥—Ä–æ–∫–∏ [{self.game.players}/10]: {', '.join([f'<@{i}>' for i in self.game.players_list.keys()])}",
                                                            color=0xEAEA04))
        else:
            self.game.db.update("games", f"room_id == {self.game.room.id}", started=1)
            self.game.ready_to_start = 2
            await self.game.starting_game()


class Connection(View):
    def __init__(self, game_class):
        super().__init__(timeout=30)
        self.game = game_class
        self.add_item(ConnectionButton(game_class))

    async def on_timeout(self):
        if self.game.ready_to_start != 2:
            if len(self.game.db.select("games", f"room_id == {self.game.room.id}", "players")["players"].split()) >= 6:
                await self.game.room.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –∑–¥–µ—Å—å –µ—Å—Ç—å")
                self.game.db.update("games", f"room_id == {self.game.room.id}", started=1)
                self.game.ready_to_start = 1
                await self.game.starting_game()
            else:
                await self.game.invite_message.delete()
                await self.game.room.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ. –ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏—Å—å, –∫–∞–Ω–∞–ª —É–¥–∞–ª—è–µ—Ç—Å—è")
                await sleep(5)
                self.game.db.delete("games", f"room_id == {self.game.room.id}")
                await self.game.room.delete()
                if self.game.cost:
                    for player in self.game.players_list.keys():
                        self.game.db.update("users", f"user_id == {player}", gold=self.game.db.select("users", f"user_id == {player}", "gold")["gold"] + self.game.cost)
                await self.game.bot.send_log(f"[GameNotStarted] –ò–≥—Ä–∞ <@{list(self.game.players_list.keys())[0]}> –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å", color=0xA927C1)


class ShowRoles(View):
    def __init__(self, game_class):
        super().__init__(timeout=30)
        self.game = game_class

    @button(style=ButtonStyle.green, label="–£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å", emoji="‚úâ", row=0)
    async def get_role(self, button, interaction: Interaction):
        interaction.response.send_message(embed=Embed(title=f"–í—ã {self.game.players_list[interaction.user.id]}",
                                                      description=f"{'–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —á–ª–µ–Ω–∞–º–∏ –ú–∞—Ñ–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–Ω–∞–ª ' + self.game.mafia_room.mention if self.game.players_list[interaction.user.id] == '–ú–∞—Ñ–∏—è' and self.game.mafia_room else ''}",
                                                      color=0xD8301F if self.game.players_list[interaction.user.id] in ("–ú–∞—Ñ–∏—è", "–ú–∞–Ω—å—è–∫") else 0x1EC623), ephemeral=True)


class GamePassTurn(View):
    def __init__(self, member):
        super().__init__(timeout=30)
        self.member = member
        self.turn = 0

    @button(style=ButtonStyle.green, label="–ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥", emoji="‚û°")
    async def get_role(self, button, interaction: Interaction):
        if interaction.user.id == self.member:
            self.turn = 1
            self.stop()
        await interaction.response.pong()


class GamePlayersVoting(View):
    def __init__(self, game_class, mode, players):
        super().__init__(timeout=60)
        for p in players:
            game_class.voting[p] = list()
            self.add_item(GamePlayerButton(game_class.__get_member(p)))
        self.game = game_class
        self.mode = mode
        self.chosen = None if mode != "–ú–∞—Ñ–∏—è" else []
        if mode == "–ú–∞—Ñ–∏—è":
            self.mafia = 3 if game_class.players > 11 else 2 if game_class.players > 7 else 1
        self.vote_count = 0

    async def interaction_check(self, interaction: Interaction) -> bool:
        for v in self.game.voting:
            if interaction.user.id in v:
                await interaction.response.pong()
                return
        if self.mode != "voting":
            if self.game.players_list[interaction.user.id] != self.mode:
                return
            if self.mode == "–ú–∞—Ñ–∏—è":
                self.chosen.append(interaction.data["custom_id"])
                if self.vote_count + 1 == self.mafia:
                    self.stop()
                    return
            else:
                if self.mode == "–î–æ–∫—Ç–æ—Ä":
                    if self.game.players_list[interaction.user.id] == self.mode:
                        if self.game.self_heal:
                            await interaction.response.send_message(embed=Embed(description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–ª–µ—á–∏—Ç—å —Å–µ–±—è –µ—â—ë —Ä–∞–∑", color=0xBF1818))
                            return
                        self.game.self_heal = True
                self.chosen = interaction.data["custom_id"]
                if self.mode == "–ö–æ–º–∏—Å—Å–∞—Ä":
                    if self.chosen in self.game.checked:
                        await interaction.response.send_message(embed=Embed(description="–í—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞", color=0xBF1818))
                        return
                    if self.game.players_list[interaction.user.id] == "–ú–∞—Ñ–∏—è":
                        interaction.response.send_message(embed=Embed(title=f"–ú–∞—Ñ–∏—è" if self.game.players_list[interaction.user.id] == '–ú–∞—Ñ–∏—è' else "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å",
                                                                      description=f"<@{interaction.user.id}>",
                                                                      color=0xD8301F if self.game.players_list[interaction.user.id] == '–ú–∞—Ñ–∏—è' else 0x1EC623), ephemeral=True)
                self.stop()
                return
        elif len(self.game.active_players_list) == self.vote_count + 1:
            self.stop()
            return
        if "-" in self.game.players_list[interaction.user.id]:
            return
        self.game.voting[interaction.data["custom_id"]].append(interaction.user.id)
        if self.mode == "voting":
            await interaction.response.send_message(embed=Embed(description=f"{interaction.user.mention} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ø—Ä–æ—Ç–∏–≤ <@{interaction.data['custom_id']}>", color=0x1988B8))
        await interaction.response.pong()
        self.vote_count += 1


class GamePlayerButton(Button):
    def __init__(self, member):
        super().__init__(style=ButtonStyle.green, label=member.nick if member.nick else member.name, custom_id=member.id)


class Game:
    def __init__(self, bot, room, db, game_hub, owner):
        self.bot = bot
        self.room: TextChannel = room
        self.db = db
        self.hub = game_hub

        self.invite_message: Message = None
        self.mafia_room: TextChannel = None

        self.ready_to_start = 0  # 0 - –Ω–µ –≥–æ—Ç–æ–≤—ã, 1 - –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, 2 - –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å
        self.players_list = {owner: ""}  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.active_players_list = [owner]  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.voting = {}
        self.self_heal = False  # –î–ª—è –¥–æ–∫—Ç–æ—Ä–∞
        self.checked = []  # –î–ª—è –∫–æ–º–∏—Å—Å–∞—Ä–∞
        self.win = None
        # self.total_players = 1  # –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ
        self.players = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.accept_players = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö –±—ã—Å—Ç—Ä—ã–π —Å—Ç—Ä–∞—Ç –∏–≥—Ä—ã
        self.accepts_list = []  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö –±—ã—Å—Ç—Ä—ã–π —Å—Ç—Ä–∞—Ç –∏–≥—Ä—ã
        # self.active_player = 0  # –ò–≥—Ä–æ–∫, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—à–∫–∞
        self.cost = 0  # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
        self.total_money = 0  # –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –∏–≥—Ä—É
        # self.difficulty = 0  # –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞
        # self.rounds_results = []  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (0 - –ø—Ä–æ–∏–≥—Ä—ã—à, 1 - –≤—ã–∏–≥—Ä—ã—à)

    async def wait_for_accept(self):
        while 1:
            if self.ready_to_start == 2:
                return
            try:
                accept_click = await self.bot.wait_for("interaction", timeout=60, check=lambda c: c.type.name == "component" and c.channel == self.room)
                await accept_click.response.pong()
                if accept_click.user.id in self.accepts_list:
                    continue
                self.accepts_list.append(accept_click.user.id)
                self.accept_players += 1
                await self.room.send(embed=Embed(description=f"{accept_click.user.mention} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã ({self.accept_players}/{self.players})"))
                if (100 / self.players) * self.accept_players >= 65:
                    self.ready_to_start = 1
                    await self.starting_game()
            except TimeoutError:
                if self.ready_to_start == 2:
                    return
            except NotFound:
                return
            except AttributeError:
                return

    async def starting_game(self):
        if self.ready_to_start == 2:
            return
        players = self.players
        m = await self.room.send("–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 5...")
        for i in range(4, 0, -1):
            await sleep(1)
            if players != self.players and self.ready_to_start == 0:
                await m.edit(content="–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω—ë–Ω.")
                self.ready_to_start = 0
                return
            await m.edit(content=f"–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {i}...")
        await sleep(1)
        self.db.update("games", f"room_id == {self.room.id}", started=1)
        self.ready_to_start = 2
        await m.edit(content="@everyone –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...")
        await sleep(2)
        await self.room.purge()
        self.total_money = self.players * self.cost
        self.total_money *= 0.9
        await self.invite_message.delete()
        await self.game_process()

    async def game_process(self):
        m: Message = await self.room.send("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π...")
        roles = ["–ú–∞—Ñ–∏—è", "–ú–∞–Ω—å—è–∫", "–î–æ–∫—Ç–æ—Ä", "–ö–æ–º–∏—Å—Å–∞—Ä", "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"]
        shuffle(roles)
        if self.players < 10:
            roles.remove("–ú–∞–Ω—å—è–∫")

        if self.players > 7:
            overwrites = {
                self.bot.get_guild(SERVER_ID).default_role: PermissionOverwrite(view_channel=False, send_message=True)
            }
            self.mafia_room = await self.bot.get_guild(SERVER_ID).create_text_channel(f"–º–∞—Ñ–∏—è", category=self.room.category, overwrites=overwrites)
        for player in self.players_list.keys():
            role = choice(roles)
            if role == "–ö–æ–º–∏—Å—Å–∞—Ä":
                self.checked.append(player)
            if role in ("–ú–∞–Ω—å—è–∫", "–î–æ–∫—Ç–æ—Ä", "–ö–æ–º–∏—Å—Å–∞—Ä"):
                roles.remove(role)
            elif role == "–ú–∞—Ñ–∏—è":
                if self.players > 11 and list(self.players_list.values()).count("–ú–∞—Ñ–∏—è") == 2:
                    roles.remove(role)
                elif self.players > 7 and list(self.players_list.values()).count("–ú–∞—Ñ–∏—è"):
                    roles.remove(role)
                if self.mafia_room:
                    await self.mafia_room.set_permissions(self.__get_member(player), view_channel=True)
            self.players_list[player] = role

        view = ShowRoles(self)
        await m.edit(content="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å", view=view)
        await sleep(30)
        await m.delete()

        m: Message = await self.room.send("–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å...")
        await sleep(2)
        await m.delete()

        round = 0
        killed = None  # —É–±–∏—Ç –º–∞—Ñ–∏–µ–π
        cured = None  # –≤—ã–ª–µ—á–µ–Ω
        murdered = None  # —É–±–∏—Ç –º–∞–Ω—å—è–∫–æ–º
        while True:
            if round:
                await self.room.send("–£ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±—É–¥–µ—Ç –ø–æ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –º–Ω–µ–Ω–∏—è")
            else:
                await self.room.send("–£ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±—É–¥–µ—Ç –ø–æ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è")
            for p in self.active_players_list:
                player = self.__get_member(p)
                await self.room.set_permissions(self.__get_member(player), send_message=True)
                view = GamePassTurn(p)
                pm: Message = await self.room.send(f"<@{p}>, —É –í–∞—Å 60 —Å–µ–∫—É–Ω–¥.", view=view)
                for i in range(59, 0, -1):
                    await sleep(1)
                    if view.turn:
                        break
                    await pm.edit(content=f"<@{p}>, —É –í–∞—Å {i} —Å–µ–∫—É–Ω–¥{('', '–∞', '—ã')[1 if i % 10 == 1 and i != 11 else 2 if 2 <= i % 10 <= 4 and i // 10 != 1 else 0]}.")
                await pm.delete()
                await self.room.set_permissions(self.__get_member(player), send_message=None)

            if round:
                await self.room.set_permissions(self.bot.get_guild(SERVER_ID).default_role, send_message=None)
                await self.room.send("–í—Å–µ–æ–±—â–µ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥")
                await sleep(50)
                await self.room.send("–û—Å—Ç–∞–ª–æ—Å—å 10 —Å–µ–∫—É–Ω–¥")
                await sleep(10)
                await self.room.set_permissions(self.bot.get_guild(SERVER_ID).default_role, send_message=False)

                view = GamePlayersVoting(self, "voting", self.active_players_list)
                await self.room.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞", view=view)
                await view.wait()
                max_votes = max(self.voting.values(), key=len)
                for p, v in self.voting.items():
                    if len(v) < max_votes:
                        self.voting.pop(p)

                if len(self.voting) != 1:
                    await self.room.send(f"–ü–æ –∏—Ç–æ–≥–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å {len(self.voting)} {'–∏–≥—Ä–æ–∫–∞' if len(self.voting) < 5 else '–∏–≥—Ä–æ–∫–æ–≤'}\n"
                                         f"–ö–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∏—Ç –ø–æ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–æ–π–¥—ë—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.")
                    for p in self.voting.keys():
                        player = self.__get_member(p)
                        await self.room.set_permissions(self.__get_member(player), send_message=True)
                        view = GamePassTurn(p)
                        pm: Message = await self.room.send(f"<@{p}>, —É –í–∞—Å 60 —Å–µ–∫—É–Ω–¥.", view=view)
                        for i in range(59, 0, -1):
                            await sleep(1)
                            if view.turn:
                                break
                            await pm.edit(content=f"<@{p}>, —É –í–∞—Å {i} —Å–µ–∫—É–Ω–¥{('', '–∞', '—ã')[1 if i % 10 == 1 and i != 11 else 2 if 2 <= i % 10 <= 4 and i // 10 != 1 else 0]}.")
                        await pm.delete()
                        await self.room.set_permissions(self.__get_member(player), send_message=None)
                    view = GamePlayersVoting(self, "voting", list(self.voting.keys()))
                    await self.room.send("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞. –ï—Å–ª–∏ –∑–¥–µ—Å—å –∏–≥—Ä–æ–∫–∏ –Ω–µ –±—É–¥—É—Ç –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã, —Ç–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∏–≥—Ä–æ–∫.", view=view)
                    await view.wait()
                    max_votes = max(self.voting.values(), key=len)
                    for p, v in self.voting.items():
                        if len(v) < max_votes:
                            self.voting.pop(p)
                    while len(self.voting) != 1:
                        self.voting.pop(choice(list(self.voting.keys())))
                kicked_player = list(self.voting.keys())[0]
                self.__removePlayer(kicked_player)
                await self.room.send(f"–ü–æ –∏—Ç–æ–≥–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–≥—Ä–æ–∫ <@{kicked_player}>")
                if self.__checkEndGame():
                    break

            await self.room.send("–°–æ–±—Ä–∞–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∏–≥—Ä–æ–∫–∏ —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è –ø–æ –¥–æ–º–∞–º –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ—á—å.")
            await sleep(2)

            view = GamePlayersVoting(self, "–ú–∞—Ñ–∏—è", self.active_players_list)
            await self.room.send("–ü—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è **–º–∞—Ñ–∏—è** –∏ –¥—É–º–∞–µ—Ç –∫–æ–≥–æ –æ–Ω–∞ —É–±—å—ë—Ç —ç—Ç–æ–π –Ω–æ—á—å—é...", view=view)
            if "–ú–∞—Ñ–∏—è" in list(self.players_list.values()):
                await view.wait()

                if len(set(view.chosen)) == len(view.chosen):
                    if len(view.chosen):
                        killed = view.chosen[0]
                    else:
                        while len(self.voting) != 1:
                            self.voting.pop(choice(list(self.voting.keys())))
                        killed = list(self.voting.keys())[0]
                else:
                    if view.chosen[0] in view.chosen[1:]:
                        killed = view.chosen[0]
                    else:
                        killed = view.chosen[1]
            else:
                await sleep(randint(10, 50))

            await self.room.send("**–ú–∞—Ñ–∏—è** —Å–¥–µ–ª–∞–ª–∞ –≤—ã–±–æ—Ä. **–ú–∞—Ñ–∏—è** –∑–∞—Å—ã–ø–∞–µ—Ç.")

            if self.players >= 10:
                view = GamePlayersVoting(self, "–ú–∞–Ω—å—è–∫", self.active_players_list)
                await self.room.send("–ü—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è **–º–∞–Ω—å—è–∫** –∏ –∏—â–µ—Ç —Å–≤–æ—é –∂–µ—Ä—Ç–≤—É...", view=view)
                if "–ú–∞–Ω—å—è–∫" in list(self.players_list.values()):
                    await view.wait()
                    if view.chosen:
                        murdered = view.chosen
                    else:
                        while len(self.voting) != 1:
                            self.voting.pop(choice(list(self.voting.keys())))
                        murdered = list(self.voting.keys())[0]
                else:
                    await sleep(randint(5, 30))

                await self.room.send("**–ú–∞–Ω—å—è–∫** —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä. **–ú–∞–Ω—å—è–∫** –∑–∞—Å—ã–ø–∞–µ—Ç.")

            view = GamePlayersVoting(self, "–î–æ–∫—Ç–æ—Ä", self.active_players_list)
            await self.room.send("–ü—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è **–¥–æ–∫—Ç–æ—Ä** –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –æ–Ω –≤—ã–ª–µ—á–∏—Ç...", view=view)
            if "–î–æ–∫—Ç–æ—Ä" in list(self.players_list.values()):
                await view.wait()
                if view.chosen:
                    cured = view.chosen
                else:
                    while len(self.voting) != 1:
                        self.voting.pop(choice(list(self.voting.keys())))
                    cured = list(self.voting.keys())[0]
            else:
                await sleep(randint(5, 30))

            await self.room.send("**–î–æ–∫—Ç–æ—Ä** —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä. **–î–æ–∫—Ç–æ—Ä** –∑–∞—Å—ã–ø–∞–µ—Ç.")

            view = GamePlayersVoting(self, "–ö–æ–º–∏—Å—Å–∞—Ä", self.active_players_list)
            await self.room.send("–ü—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è **–∫–æ–º–∏—Å—Å–∞—Ä** –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –º–∞—Ñ–∏—é...", view=view)
            if "–ö–æ–º–∏—Å—Å–∞—Ä" in list(self.players_list.values()):
                await view.wait()
            else:
                await sleep(randint(5, 30))

            await self.room.send("**–ö–æ–º–∏—Å—Å–∞—Ä** —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä. **–ö–æ–º–∏—Å—Å–∞—Ä** –∑–∞—Å—ã–ø–∞–µ—Ç.")
            await sleep(2)

            if killed == murdered:
                dead = f"<@{killed}>."
                self.__removePlayer(killed)
            elif killed == cured != murdered:
                dead = f"<@{murdered}>."
                self.__removePlayer(murdered)
            elif killed != cured:
                dead = f"<@{killed}> –∏ <@{murdered}>."
                self.__removePlayer(killed, murdered)
            else:
                dead = None

            await self.room.send(f"–ù–∞—Å—Ç—É–ø–∞–µ—Ç —É—Ç—Ä–æ. –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ—Å—ã–ø–∞—é—Ç—Å—è{', –∫—Ä–æ–º–µ ' + dead if dead else '.'}")

            if self.__checkEndGame():
                break
            round += 1

        await self.mafia_room.delete()

        roles = {"–ú–∞—Ñ–∏—è": [],
                 "–ú–∞–Ω—å—è–∫": [],
                 "–ö–æ–º–∏—Å—Å–∞—Ä": [],
                 "–î–æ–∫—Ç–æ—Ä": [],
                 "–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏": []}
        wins = []
        for p, r in self.players_list:
            roles[r.replace("-", "")].append(f"<@{p}>")
            if self.win == "–ú–∞–Ω—å—è–∫" == r:
                wins.append(p)
            elif self.win == "–ú–∞—Ñ–∏—è" and p in roles[self.win]:
                wins.append(p)
            else:
                wins.append(p)
        fm = ""
        for r, p in roles:
            fm += f"**{r}**: {', '.join(p)}\n"

        gold = self.total_money // len(wins)
        award = ""
        for p in list(self.players_list.keys()):
            points = 50
            player = self.db.select("users", f"user_id == {p}", "points", "gold")
            if p in wins:
                points = 120
                award += f"<@{p}> –ø–æ–ª—É—á–∞–µ—Ç **{points}** –æ–ø—ã—Ç–∞ –∏ **{gold}** –∑–æ–ª–æ—Ç–∞\n"
                self.db.update("users", f"user_id == {p}", points=player["points"] + points, gold=player["gold"] + gold)
                continue
            self.db.update("users", f"user_id == {p}", points=player["points"] + points)
        award += "\n–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∏–ª–∏ —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑ –≤ —Ä–∞–∑–º–µ—Ä–µ 50 –æ–ø—ã—Ç–∞"

        await self.room.send(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.", embeds=[Embed(title="–ü–æ–±–µ–∂–¥–∞–µ—Ç", description=self.win, color=0x1EC623 if self.win == "–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏" else 0xD8301F),
                                                        Embed(title="–†–æ–ª–∏", description=fm, color=0xF9BA1C),
                                                        Embed(title="–ù–∞–≥—Ä–∞–¥–∞", description=award, color=0xEDD50B)])

        await self.room.send("–ö–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
        await sleep(30)
        self.db.delete("games", f"room_id == {self.room.id}")
        await self.room.delete()
        await self.bot.send_log(f"[GameEnd] –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å(–∏): {'>, <@'.join(wins)}", color=0xE160F9)

    def __removePlayer(self, *players):
        for player in players:
            self.active_players_list.remove(player)
            self.players_list[player] = "-" + self.players_list[player]
            if self.players_list[player] == "–ú–∞—Ñ–∏—è":
                await self.mafia_room.set_permissions(self.__get_member(player), view_channel=False)

    def __checkEndGame(self) -> bool:
        active_roles = list(self.players_list.values())
        if "–ú–∞—Ñ–∏—è" not in active_roles and "–ú–∞–Ω—å—è–∫" not in active_roles:
            self.win = "–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏"
            return True
        for i in active_roles:
            if "-" in i:
                active_roles.remove(i)
        mafia_count = active_roles.count("–ú–∞—Ñ–∏—è")
        murderer = "–ú–∞–Ω—å—è–∫" in active_roles
        if mafia_count >= len(active_roles) - mafia_count:
            self.win = "–ú–∞—Ñ–∏—è"
            return True
        if murderer and len(active_roles) - 1 <= 1:
            self.win = "–ú–∞–Ω—å—è–∫"
            return True
        return False

    def __get_member(self, member_id: int) -> Member | None:
        return self.bot.get_guild(SERVER_ID).get_member(member_id)
