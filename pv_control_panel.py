from asyncio.exceptions import TimeoutError

import nextcord
from nextcord import Embed, utils, ButtonStyle
from nextcord.errors import NotFound
from nextcord.ui import Button, View

from config import ROLES


async def voice_control_panel(text, voice, member, bot, db):
    async def get_message(mess):
        send = await text.send(mess, delete_after=60.0)
        message = await bot.wait_for("message", timeout=60, check=lambda x: x.author == member and x.channel == text)
        await send.delete()
        return message.content

    m = ""
    channel_overwrites = utils.get(voice.guild.channels, id=voice.id).overwrites_for(utils.get(voice.guild.roles, id=ROLES["everyone"]))
    view_permission = channel_overwrites.view_channel
    speak_permission = channel_overwrites.speak
    try:
        components = [
            Button(style=ButtonStyle.success, label="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", emoji="üåê", row=0, custom_id="open") if not view_permission else "",
            Button(style=ButtonStyle.danger, label="–ó–∞–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", emoji="‚õî", row=0, custom_id="close") if view_permission else "",
            Button(style=ButtonStyle.success, label="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", emoji="üìù", row=1, custom_id="change_name") if voice.name == "–ö–∞–Ω–∞–ª –¥–ª—è " + member.name else "",
            Button(style=ButtonStyle.success, label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", emoji="‚≠ï", row=1, custom_id="change_limit"),
            Button(style=ButtonStyle.danger, label="–ó–∞–º—É—Ç–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", emoji="üò∂", row=2, custom_id="mute_all") if speak_permission or speak_permission is None else
            Button(style=ButtonStyle.success, label="–†–∞–∑–º—É—Ç–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", emoji="üòÑ", row=2, custom_id="unmute_all"),
            Button(style=ButtonStyle.primary, label="–ó–∞–º—É—Ç–∏—Ç—å/—Ä–∞–∑–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", emoji="üé§", row=2, custom_id="mute"),
            Button(style=ButtonStyle.danger, label="–ó–∞–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", emoji="üö∑", row=3, custom_id="ban"),
            Button(style=ButtonStyle.success, label="–†–∞–∑–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", emoji="üöπ", row=3, custom_id="unban"),
            Button(style=ButtonStyle.success, label="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", emoji="üë•", row=3, custom_id="invite") if not view_permission else "",
            Button(style=ButtonStyle.primary, label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", emoji="üìï", row=4, custom_id="password") if not view_permission else ""
        ]
        view = View()
        for button in components:
            if button:
                view.add_item(button)
        password = db.select('private_voices', f'channel_owner == {member.id}', 'password')['password']
        password_message = f"\n –ü–∞—Ä–æ–ª—å: **{password.replace('_', '*_*')}**" if password else ""
        m = await text.send(embed=Embed(description="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º: \n"
                                                    "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –ø–æ–¥ —Å–µ–±—è."
                                                    f"{password_message}"
                                                    "\nP.S. **–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –Ω—É–∂–Ω–æ —Å –Ω–µ–≥–æ –≤—ã–π—Ç–∏**", color=0xF3E400),
                            view=view)
        response = await bot.wait_for("interaction", timeout=300)
        while response.type.name != "component" or response.channel != text:
            response = await bot.wait_for("interaction", timeout=300)
        await m.delete()
        m = ""
        c = Commands(text, voice, member, db)
        match response.data["custom_id"]:
            case "open":
                await c.open()
            case "close":
                await c.close()
            case "ban":
                await c.ban(await get_message("–£–ø–æ–º—è–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∫ –∑–¥–µ—Å—å:"))
            case "unban":
                await c.unban(await get_message("–£–ø–æ–º—è–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∫ –∑–¥–µ—Å—å:"))
            case "change_name":
                await c.name(await get_message("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∑–¥–µ—Å—å:"))
            case "password":
                await c.password(await get_message("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∑–¥–µ—Å—å:"))
            case "invite":
                await c.invite(await get_message("–£–ø–æ–º—è–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∫ –∑–¥–µ—Å—å:"))
            case "change_limit":
                await c.limit(await get_message("–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∑–¥–µ—Å—å:"))
            case "mute":
                await c.mute(await get_message("–£–ø–æ–º—è–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∫ –∑–¥–µ—Å—å:"))
            case "mute_all":
                await c.mute_all()
            case "unmute_all":
                await c.unmute_all()

        return False
    except TimeoutError:
        if m:
            try:
                await m.delete()
            except NotFound:
                return True
        return False
    except NotFound:
        return True
    except AttributeError:
        return True


class Commands:
    def __init__(self, text, voice, member, db):
        self.text = text
        self.voice = voice
        self.member = member
        self.everyone = utils.get(self.voice.guild.roles, id=ROLES["everyone"])
        self.db = db

    async def open(self):
        speak = self.voice.overwrites_for(self.everyone).speak
        await self.voice.set_permissions(self.everyone, view_channel=True, connect=True, speak=speak)
        await self.text.send(embed=Embed(description="–ö–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö", color=0x21F300), delete_after=5.0)

    async def close(self):
        speak = self.voice.overwrites_for(self.everyone).speak
        await self.voice.set_permissions(self.everyone, view_channel=False, connect=True, speak=speak)
        await self.text.send(embed=Embed(description="–ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö", color=0x21F300), delete_after=5.0)

    async def ban(self, ban_member: str):
        member = self.__get_member(ban_member)
        if self.member == member:
            await self.text.send(embed=Embed(description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è", color=0xBF1818), delete_after=5.0)
            return
        if not member:
            await self.text.send(embed=Embed(description="–ù–µ –≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", color=0xBF1818), delete_after=5.0)
            return
        if self.voice.overwrites_for(member).view_channel is False:
            await self.text.send(embed=Embed(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", color=0xBF1818), delete_after=5.0)
            return
        if member in self.voice.members:
            await member.move_to(channel=None, reason="–ó–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await self.voice.set_permissions(member, view_channel=False)
        await self.text.send(embed=Embed(description=f"<@{member.id}> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", color=0x21F300), delete_after=5.0)

    async def unban(self, unban_member):
        member = self.__get_member(unban_member)
        if not member:
            await self.text.send(embed=Embed(description="–ù–µ –≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", color=0xBF1818), delete_after=5.0)
            return
        if self.voice.overwrites_for(member).view_channel is None:
            await self.text.send(embed=Embed(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", color=0xBF1818), delete_after=5.0)
            return
        await self.voice.set_permissions(member, view_channel=True)
        await self.text.send(embed=Embed(description=f"<@{member.id}> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", color=0x21F300), delete_after=5.0)

    async def name(self, name):
        if name == " " or name == "":
            await self.text.send(embed=Embed(description="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", color=0xBF1818), delete_after=5.0)
            return
        if len(name) > 100:
            name = name[0:100]
        await self.voice.edit(name=name)
        await self.text.send(embed=Embed(description=f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ **{name}**", color=0x21F300), delete_after=5.0)

    async def password(self, password):
        if len(password) <= 10:
            self.db.update("private_voices", f"channel_owner == {self.member.id}", password=password)
        else:
            await self.text.send(embed=Embed(description="–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 –∏–ª–∏ –º–µ–Ω–µ–µ —Å–∏–º–≤–æ–ª–æ–≤", color=0xBF1818), delete_after=5.0)
            return
        await self.text.send(embed=Embed(description=f"–ü–∞—Ä–æ–ª—å **{password}** —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", color=0x21F300), delete_after=5.0)

    async def invite(self, invited_member):
        member = self.__get_member(invited_member)
        if self.member == member:
            await self.text.send(embed=Embed(description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–µ–±—è", color=0xBF1818), delete_after=5.0)
            return
        if not member:
            await self.text.send(embed=Embed(description="–ù–µ –≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", color=0xBF1818), delete_after=5.0)
            return
        await self.voice.set_permissions(member, view_channel=True)
        await self.text.send(embed=Embed(description=f"–¢–µ–ø–µ—Ä—å <@{member.id}> –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É", color=0x21F300), delete_after=5.0)

    async def limit(self, number):
        try:
            lim = int(number)
            if lim < 2:
                await self.text.send(embed=Embed(description="–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö", color=0xBF1818), delete_after=5.0)
            elif lim > 99:
                await self.voice.edit(user_limit=False)
                await self.text.send(embed=Embed(description="–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω", color=0x21F300), delete_after=5.0)
            else:
                await self.voice.edit(user_limit=lim)
                await self.text.send(embed=Embed(description=f"–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ **{str(lim)}**", color=0x21F300), delete_after=5.0)
        except ValueError:
            await self.text.send(embed=Embed(description="–ù–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ —á–∏—Å–ª–æ", color=0xBF1818), delete_after=5.0)

    async def mute(self, mute_member):
        member = self.__get_member(mute_member)
        if self.member == member:
            await self.text.send(embed=Embed(description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å —Å–µ–±—è", color=0xBF1818), delete_after=5.0)
            return
        view_channel = await self.voice.overwrites_for(member).view_channel
        if self.voice.overwrites_for(member).speak is False:
            await self.voice.set_permissions(member, speak=True, view_channel=view_channel)
            await self.text.send(embed=Embed(description=f"<@{member.id}> —Ä–∞–∑–º—É—á–µ–Ω", color=0x21F300), delete_after=5.0)
        else:
            await self.voice.set_permissions(member, speak=False, view_channel=view_channel)
            await self.text.send(embed=Embed(description=f"<@{member.id}> –∑–∞–º—É—á–µ–Ω", color=0x21F300), delete_after=5.0)

    async def mute_all(self):
        view_channel = self.voice.overwrites_for(self.everyone).view_channel
        connect = self.voice.overwrites_for(self.everyone).connect
        await self.voice.set_permissions(utils.get(self.voice.guild.roles, id=ROLES["everyone"]), speak=False, view_channel=view_channel, connect=connect)
        await self.text.send(embed=Embed(description="–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–º—É—á–µ–Ω—ã", color=0x21F300), delete_after=5.0)

    async def unmute_all(self):
        view_channel = self.voice.overwrites_for(self.everyone).view_channel
        connect = self.voice.overwrites_for(self.everyone).connect
        await self.voice.set_permissions(utils.get(self.voice.guild.roles, id=ROLES["everyone"]), speak=True, view_channel=view_channel, connect=connect)
        await self.text.send(embed=Embed(description="–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–∑–º—É—á–µ–Ω—ã", color=0x21F300), delete_after=5.0)

    def __get_member(self, str_member: str) -> nextcord.Member | None:
        if len(str_member) in [21, 22] and str_member[0:2] == "<@" and str_member[-1] == ">":
            try:
                return self.voice.guild.get_member(int(str_member[-19:-1]))
            except ValueError:
                pass
        for user in self.voice.guild.members:
            if user.nick:
                if user.nick.lower() == str_member.lower():
                    return user
            elif user.name.lower() == str_member.lower():
                return user
        return ""
