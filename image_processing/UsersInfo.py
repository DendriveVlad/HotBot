from asyncio import sleep
from time import time
from random import randint

from nextcord import File, Embed, utils, ButtonStyle, Interaction
from nextcord.errors import DiscordServerError
from nextcord.ui import Button, button, View

from image_processing.top import get_top
from image_processing.rank import get_rank
from config import LEVEL_POINTS, CHANNELS, SERVER_ID, ROLES
from info import send_log, get_level

challenges = {
    1: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å 5 –º–µ–º–æ–≤",
    2: "–ù–∞–ø–∏—Å–∞—Ç—å 50 —Å–æ–æ–±—â–µ–Ω–∏–π",
    3: "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 20 —Å–æ–æ–±—â–µ–Ω–∏–π",
    4: "–ó–∞—Ñ–ª—É–¥–∏—Ç—å —Ñ–ª—É–¥–∏–ª–∫—É",
    5: "–ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º",
    6: "–°—ã–≥—Ä–∞—Ç—å 1 —Ä–∞–∑ –≤ –ª—é–±—É—é –º–∏–Ω–∏-–∏–≥—Ä—É",
    7: "–°—ã–≥—Ä–∞—Ç—å 5 —Ä–∞–∑ –≤ –∫–∞–∑–∏–Ω–æ",
    8: "–ü—Ä–æ–±—ã—Ç—å 30 –º–∏–Ω—É—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ"
}


class ShowUserCard(Button):
    def __init__(self, db, bot):
        super().__init__(style=ButtonStyle.success, label="–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å", emoji="üîù", custom_id="get_level")
        self.db = db
        self.bot = bot

    async def callback(self, interaction: Interaction):
        if int(time()) - self.db.select("users", f"user_id == {interaction.user.id}", "last_info")["last_info"] <= 15:
            await interaction.response.pong()
            return
        self.db.update("users", f"user_id == {interaction.user.id}", last_info=int(time()))
        await interaction.response.defer(ephemeral=True, with_message=True)
        await interaction.followup.send(file=File(fp=get_rank(interaction.channel.guild, interaction.user.id, self.db)), ephemeral=True)


class UserRewardChallenge(View):
    def __init__(self, db, bot):
        super().__init__(timeout=None)
        self.db = db
        self.bot = bot

    @button(style=ButtonStyle.primary, label="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É", emoji="üí∞")
    async def getLevel(self, _, interaction: Interaction):
        if int(time()) - self.db.select("users", f"user_id == {interaction.user.id}", "last_info")["last_info"] <= 15:
            await interaction.response.pong()
            return
        dt = self.db.select("info", "", "datetime")["datetime"]
        if int(time()) - dt >= 60 * 60 * 24 * 2:
            self.db.update("info", f"datetime=={dt}", datetime=dt + (60 * 60 * 24))
            await interaction.response.send_message(embed=Embed(description=f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã –µ—â—ë —Ä–∞–∑", color=0x21F300), ephemeral=True)
            return
        date = self.db.select("users", f"user_id == {interaction.user.id}", "points", "gold", "last_reward", "rewards_count")
        if int(time()) - date["last_reward"] <= 60 * 60 * 24:
            await interaction.response.send_message(embed=Embed(description=f"<@{interaction.user.id}>, –í—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É", color=0xBF1818), ephemeral=True)
            self.db.update("users", f"user_id == {interaction.user.id}", last_info=int(time()))
        else:
            if int(time()) - date["last_reward"] < 60 * 60 * 24 * 2:
                date["rewards_count"] += 1
            else:
                date["rewards_count"] = 1
            if date["rewards_count"] > 7:
                date["rewards_count"] = 7
            level = await get_level(date["points"])
            plus_gold = 5 + 3 * date["rewards_count"] + (4 if date["rewards_count"] == 7 else 0)
            bonus_gold_level = plus_gold * (0.02 * level)

            percent = 0
            for role in interaction.user.roles:
                if role.id in (ROLES["Old"], ROLES["Sponsor1"]) and percent == 0:
                    percent = 0.05
                elif role.id in (ROLES["Booster"], ROLES["Jedi"], ROLES["Sith"], ROLES["Sponsor2"]) and percent < 0.1:
                    percent = 0.1
                elif role.id == ROLES["Sponsor3"]:
                    percent = 0.2
                    break
                elif role.id == ROLES["Sponsor4"]:
                    percent = 0.3
                    break
                elif role.id == ROLES["Sponsor5"]:
                    percent = 0.4
                    break
            bonus_gold_status = plus_gold * percent

            plus_exp = 25 + (5 * date["rewards_count"]) * ((date["rewards_count"] // 2) + 1) + (35 if date["rewards_count"] == 7 else 0)
            self.db.update("users", f"user_id == {interaction.user.id}", points=date["points"] + plus_exp, gold=date["gold"] + plus_gold + int(bonus_gold_level + bonus_gold_status), last_reward=dt + (60 * 60 * 24), rewards_count=date["rewards_count"])
            await send_log(guild=interaction.guild, log_type="MemberGetReward", info=f"–°–æ–±—Ä–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É", member=interaction.user, fields=[("–û–ø—ã—Ç:", str(plus_exp)), ("–ó–æ–ª–æ—Ç–æ:", str(plus_gold + int(bonus_gold_level + bonus_gold_status)))])
            mess_level = f"(+{int(bonus_gold_level + bonus_gold_status)}: " \
                         f"{('–±–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å ' + str(2 * level) + '%' if bonus_gold_level else '') + (', ' if bonus_gold_level and bonus_gold_status else '') + ('–±–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ç—É—Å ' + str(int(percent * 100)) + '%' if bonus_gold_status else '')})" if bonus_gold_level or bonus_gold_status else ""

            await interaction.response.send_message(
                embed=Embed(title="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!", description=f"<@{interaction.user.id}>, –í—ã –ø–æ–ª—É—á–∏–ª–∏: \n"
                                                             f"–û–ø—ã—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ **{plus_exp}** –µ–¥–∏–Ω–∏—Ü, \n"
                                                             f"–ó–æ–ª–æ—Ç–æ –≤ —Ä–∞–∑–º–µ—Ä–µ **{plus_gold}** –µ–¥–∏–Ω–∏—Ü {mess_level}", color=0x58A3FC), ephemeral=True
            )
            await level_up(self.bot, date["points"], date["points"] + plus_exp, interaction.user.id)

    @button(style=ButtonStyle.success, label="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", emoji="üìì")
    async def getChallenge(self, _, interaction: Interaction):
        if int(time()) - self.db.select("users", f"user_id == {interaction.user.id}", "last_info")["last_info"] <= 15:
            await interaction.response.pong()
            return
        dt = self.db.select("info", "", "datetime")["datetime"]
        if int(time()) - dt >= 60 * 60 * 24 * 2:
            self.db.update("info", f"datetime=={dt}", datetime=dt + (60 * 60 * 24))
            await interaction.response.send_message(embed=Embed(description=f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –µ—â—ë —Ä–∞–∑", color=0x21F300), ephemeral=True)
            return
        date = self.db.select("users", f"user_id == {interaction.user.id}", "challenge", "challenge_progress", "last_challenge")
        if int(time()) - date["last_challenge"] <= 60 * 60 * 24:
            await interaction.response.send_message(embed=Embed(description=
                                                                f"<@{interaction.user.id}>, –í—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ" +
                                                                (f"\n–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: **{challenges[date['challenge']]}**" if date["challenge"] else "") +
                                                                (f" ({date['challenge_progress']})" if date["challenge_progress"] else ""),
                                                                color=0xBF1818), ephemeral=True)
            self.db.update("users", f"user_id == {interaction.user.id}", last_info=int(time()))
            return
        challenge = randint(1, 8)
        await interaction.response.send_message(
            embed=Embed(title="–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ", description=challenges[challenge] + (" (—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã, –≥–¥–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –æ–ø—ã—Ç)" if challenge in (2, 3) else ""), color=0x58A3FC), ephemeral=True
        )
        self.db.update("users", f"user_id == {interaction.user.id}", challenge=challenge, challenge_progress=0, last_challenge=dt + (60 * 60 * 24))
        await send_log(guild=interaction.guild, log_type="MemberGetChallenge", info=f"–ü–æ–ª—É—á–∏–ª –∑–∞–¥–∞–Ω–∏–µ {challenges[challenge]}", member=interaction.user)


async def top(channel, bot, db):
    top_message = None
    while True:
        top_image = File(fp=get_top(channel.guild, db))
        if top_message:
            await top_message.delete()
        else:
            await channel.purge()
            award = UserRewardChallenge(db=db, bot=bot)
            await channel.send(embed=Embed(description="**–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ 15 —Å–µ–∫—É–Ω–¥** \n"
                                                       "**–¢–æ–ø –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç \n**"
                                                       "–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É \n"
                                                       "(**–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥, —Ç–æ –æ–Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç**)"), view=award)
        try:
            level = View(timeout=None)
            level.add_item(ShowUserCard(db=db, bot=bot))
            top_message = await channel.send(file=top_image, view=level)
        except DiscordServerError:
            continue
        await sleep(600)


async def level_up(bot, old_points, new_points, member_id):
    if new_points < 1060 or old_points > 258000:
        return
    for level, points in LEVEL_POINTS.items():
        if old_points < points <= new_points:
            channel = utils.get(bot.get_guild(SERVER_ID).channels, id=CHANNELS["Top"])
            await channel.send(f"<@{member_id}>", embed=Embed(description=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!\n"
                                                                          f"–¢–µ–ø–µ—Ä—å –í–∞—à —É—Ä–æ–≤–µ–Ω—å: **{level}**", colour=0x21F300), delete_after=20)
            await send_log(guild=channel.guild, log_type="MemberNewLevel", info=f"–ü–æ–ª—É—á–∏–ª —É—Ä–æ–≤–µ–Ω—å {level}", member=bot.get_user(member_id))

            if level == 30:
                await channel.send(embed=Embed(description=f"üò± <@{member_id}> –¥–æ—Å—Ç–∏–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è!", color=0xFF6060), delete_after=3600)
            return


async def challengePassed(bot, db, member):
    date = db.select("users", f"user_id == {member.id}", "points", "gold", "challenge")
    plus_gold = 20
    level = await get_level(date["points"])
    bonus_gold_level = plus_gold * (0.02 * level)

    percent = 0
    for role in member.roles:
        if role.id in (ROLES["Old"], ROLES["Sponsor1"]) and percent == 0:
            percent = 0.05
        elif role.id in (ROLES["Booster"], ROLES["Jedi"], ROLES["Sith"], ROLES["Sponsor2"]) and percent < 0.1:
            percent = 0.1
        elif role.id == ROLES["Sponsor3"]:
            percent = 0.2
            break
        elif role.id == ROLES["Sponsor4"]:
            percent = 0.3
            break
        elif role.id == ROLES["Sponsor5"]:
            percent = 0.4
            break
    bonus_gold_status = plus_gold * percent

    db.update("users", f"user_id == {member.id}", challenge=0, challenge_progress=0, points=date["points"] + 150, gold=date["gold"] + plus_gold + int(bonus_gold_level + bonus_gold_status))
    channel = utils.get(bot.get_guild(SERVER_ID).channels, id=CHANNELS["Top"])
    mess_level = f"(+{int(bonus_gold_level + bonus_gold_status)}: " \
                 f"{('–±–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å ' + str(2 * level) + '%' if bonus_gold_level else '') + (', ' if bonus_gold_level and bonus_gold_status else '') + ('–±–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ç—É—Å ' + str(int(percent * 100)) + '%' if bonus_gold_status else '')})" if bonus_gold_level or bonus_gold_status else ""

    await channel.send(f"<@{member.id}>", embed=Embed(description=f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n"
                                                                  f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 150 –æ–ø—ã—Ç–∞ –∏ {plus_gold} –∑–æ–ª–æ—Ç–∞ {mess_level}", colour=0x21F300), delete_after=20)
    await send_log(guild=channel.guild, log_type="MemberChallengePassed", info=f"–ó–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ {challenges[date['challenge']]}", member=member, fields=[("–û–ø—ã—Ç:", "120"), ("–ó–æ–ª–æ—Ç–æ:", str(plus_gold + int(bonus_gold_level + bonus_gold_status)))])
